#!/usr/bin/env python3
"""
Setup script for S-Oasis Safety Monitoring System
This script helps configure and test your Tapo C520 camera setup
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def check_python_version():
    """Check if Python version is compatible"""
    if sys.version_info < (3, 8):
        print("[ERROR] Python 3.8 or higher is required")
        print(f"[ERROR] Current version: {sys.version}")
        return False
    print(f"[OK] Python version: {sys.version.split()[0]}")
    return True

def install_dependencies():
    """Install required dependencies"""
    print("\n[INFO] Installing dependencies...")
    
    try:
        # Upgrade pip first
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
        
        # Install requirements
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        
        print("[OK] Dependencies installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Failed to install dependencies: {e}")
        return False

def create_directories():
    """Create necessary directories"""
    print("\n[INFO] Creating directories...")
    
    directories = [
        "dataset",
        "results",
        "ppe_system/results"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"[OK] Created directory: {directory}")
    
    return True

def check_model_file():
    """Check if YOLO model file exists"""
    print("\n[INFO] Checking model file...")
    
    if os.path.exists("best.pt"):
        print("[OK] YOLO model file found: best.pt")
        return True
    else:
        print("[WARNING] YOLO model file 'best.pt' not found")
        print("[INFO] Please ensure your trained YOLO model is named 'best.pt' and placed in the project root")
        return False

def configure_camera():
    """Interactive camera configuration"""
    print("\n[INFO] Camera Configuration")
    print("=" * 40)
    
    # Load current config if exists
    try:
        from camera_config import CAMERA_CONFIG
        current_config = CAMERA_CONFIG.copy()
    except:
        current_config = {
            "ip": "192.168.1.100",
            "username": "admin",
            "password": "password",
            "rtsp_port": 554,
            "stream_path": "stream1"
        }
    
    print("Please enter your Tapo C520 camera details:")
    print("(Press Enter to keep current value)")
    
    # Get camera IP
    ip = input(f"Camera IP address [{current_config['ip']}]: ").strip()
    if ip:
        current_config['ip'] = ip
    
    # Get username
    username = input(f"Camera username [{current_config['username']}]: ").strip()
    if username:
        current_config['username'] = username
    
    # Get password
    password = input(f"Camera password [{current_config['password']}]: ").strip()
    if password:
        current_config['password'] = password
    
    # Get stream path
    print("\nStream options:")
    print("  stream1 - High quality (recommended)")
    print("  stream2 - Low quality (for slower networks)")
    stream = input(f"Stream path [{current_config['stream_path']}]: ").strip()
    if stream:
        current_config['stream_path'] = stream
    
    # Write updated config
    config_content = f'''"""
Camera Configuration for S-Oasis Safety Monitoring System
Auto-generated by setup_system.py
"""

# TP-Link Tapo C520 Camera Configuration
CAMERA_CONFIG = {{
    # Network Configuration
    "ip": "{current_config['ip']}",
    "rtsp_port": {current_config['rtsp_port']},
    
    # Authentication
    "username": "{current_config['username']}",
    "password": "{current_config['password']}",
    
    # Stream Configuration
    "stream_path": "{current_config['stream_path']}",
    "use_tcp": True,
    
    # Performance Settings
    "fps_limit": 15,
    "buffer_size": 1,
    "frame_skip": 3,
}}

# Detection Configuration
DETECTION_CONFIG = {{
    "required_ppe": ["Hardhat", "Mask", "Safety Vest"],
    "yolo_confidence": 0.5,
    "face_tolerance": 0.6,
    "face_model": "hog",
    "log_interval": 30,
    "alert_cooldown": 30,
}}

# Directory Configuration
PATHS = {{
    "employee_faces": "dataset",
    "output_directory": "results",
    "model_path": "best.pt",
    "log_filename": "live_ppe_log.csv"
}}

# Display Configuration
DISPLAY_CONFIG = {{
            "window_name": "S-Oasis Live Monitoring",
    "show_fps": True,
    "show_confidence": True,
    "face_color": (255, 0, 255),
    "ppe_compliant_color": (0, 255, 0),
    "ppe_other_color": (0, 0, 255),
    "status_compliant_color": (0, 255, 0),
    "status_violation_color": (0, 0, 255),
}}

def get_rtsp_url():
    """Generate RTSP URL from configuration"""
    config = CAMERA_CONFIG
    return f"rtsp://{{config['username']}}:{{config['password']}}@{{config['ip']}}:{{config['rtsp_port']}}/{{config['stream_path']}}"

def print_config():
    """Print current configuration (hiding password)"""
    print("=" * 50)
    print("S-OASIS SAFETY MONITORING SYSTEM CONFIGURATION")
    print("=" * 50)
    
    config = CAMERA_CONFIG.copy()
    config['password'] = '*' * len(config['password'])
    
    print(f"Camera IP: {{config['ip']}}")
    print(f"RTSP Port: {{config['rtsp_port']}}")
    print(f"Username: {{config['username']}}")
    print(f"Password: {{config['password']}}")
    print(f"Stream Path: {{config['stream_path']}}")
    print(f"RTSP URL: rtsp://{{config['username']}}:***@{{config['ip']}}:{{config['rtsp_port']}}/{{config['stream_path']}}")
    print(f"Required PPE: {{', '.join(DETECTION_CONFIG['required_ppe'])}}")
    print(f"Model Path: {{PATHS['model_path']}}")
    print(f"Employee Faces Directory: {{PATHS['employee_faces']}}")
    print("=" * 50)

if __name__ == "__main__":
    print_config()
'''
    
    with open("camera_config.py", "w") as f:
        f.write(config_content)
    
    print(f"\n[OK] Camera configuration saved to camera_config.py")
    return True

def test_camera_connection():
    """Test camera connection"""
    print("\n[INFO] Testing camera connection...")
    
    try:
        result = subprocess.run([sys.executable, "test_rtsp_connection.py"], 
                              capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("[OK] Camera connection test passed")
            return True
        else:
            print("[ERROR] Camera connection test failed")
            print("Output:", result.stdout)
            print("Error:", result.stderr)
            return False
    except subprocess.TimeoutExpired:
        print("[ERROR] Camera connection test timed out")
        return False
    except Exception as e:
        print(f"[ERROR] Failed to run camera test: {e}")
        return False

def setup_face_recognition():
    """Setup face recognition"""
    print("\n[INFO] Face Recognition Setup")
    print("=" * 40)
    
    dataset_dir = Path("dataset")
    
    # Check if dataset directory has images
    image_files = list(dataset_dir.glob("*.jpg")) + list(dataset_dir.glob("*.jpeg")) + list(dataset_dir.glob("*.png"))
    
    if image_files:
        print(f"[OK] Found {len(image_files)} employee photos:")
        for img in image_files:
            print(f"    - {img.name}")
    else:
        print("[WARNING] No employee photos found in dataset/ directory")
        print("[INFO] To enable face recognition:")
        print("       1. Add employee photos to dataset/ directory")
        print("       2. Name files with employee names (e.g., 'John_Doe.jpg')")
        print("       3. Ensure photos show clear faces")
    
    return True

def main():
    """Main setup function"""
    print("S-Oasis Safety Monitoring System Setup")
    print("=" * 50)
    
    # Check Python version
    if not check_python_version():
        return
    
    # Install dependencies
    if not install_dependencies():
        return
    
    # Create directories
    create_directories()
    
    # Check model file
    model_exists = check_model_file()
    
    # Configure camera
    configure_camera()
    
    # Setup face recognition
    setup_face_recognition()
    
    # Final summary
    print("\n" + "=" * 50)
    print("SETUP SUMMARY")
    print("=" * 50)
    
    print(f"✓ Python version compatible")
    print(f"✓ Dependencies installed")
    print(f"✓ Directories created")
    print(f"{'✓' if model_exists else '⚠'} YOLO model {'found' if model_exists else 'missing'}")
    print(f"✓ Camera configured")
    
    print("\nNext steps:")
    print("1. Test camera connection: python test_rtsp_connection.py")
    print("2. Run detection system: python detect_ppe_live_stream.py")
    
    if not model_exists:
        print("\nNOTE: Place your trained YOLO model as 'best.pt' in the project directory")

if __name__ == "__main__":
    main() 